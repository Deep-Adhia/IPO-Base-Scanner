name: IPO Scanner v2

on:
  schedule:
    - cron: '30 14 * * 1-5'   # Daily scan at 2:30 PM IST
    - cron: '0 18 * * 1-5'    # Stop-loss update at 6:00 PM IST
    - cron: '30 14 * * 0'     # Weekly summary, Sunday
    - cron: '0 15 1 * *'      # Monthly review, 1st of month
  workflow_dispatch:
    inputs:
      mode:
        description: 'scan | stop_loss_update | weekly_summary | monthly_review | heartbeat'
        required: true
        default: 'scan'
        type: choice
        options:
          - scan
          - stop_loss_update
          - weekly_summary
          - monthly_review
          - heartbeat

jobs:
  run-scanner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Cache TA-Lib installation
        id: cache-talib
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/libta_lib.so*
            /usr/local/include/ta-lib
            /usr/local/bin/ta-config
          key: talib-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            talib-${{ runner.os }}-
      
      - name: Install TA-Lib from source
        if: steps.cache-talib.outputs.cache-hit != 'true'
        run: |
          echo "Installing TA-Lib from source (cache miss)..."
          sudo apt-get update
          sudo apt-get install -y build-essential wget
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          ./configure --prefix=/usr/local
          make
          sudo make install
          sudo ldconfig
          echo "TA-Lib installation completed"
      
      - name: Install TA-Lib (cached)
        if: steps.cache-talib.outputs.cache-hit == 'true'
        run: |
          echo "Using cached TA-Lib installation..."
          sudo ldconfig
      
      - name: Verify TA-Lib installation
        run: |
          echo "Verifying TA-Lib installation..."
          python -c "import talib; print('‚úÖ TA-Lib is available')" || echo "‚ùå TA-Lib not available"
      
      - name: Cache Python dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Show workflow mode and timing
        run: |
          echo "üöÄ =========================================="
          echo "üöÄ IPO Scanner Workflow Started"
          echo "üöÄ =========================================="
          echo "üìÖ Date: $(date)"
          echo "‚è∞ Time: $(date +%H:%M:%S)"
          echo "üîÑ Event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üéØ Mode: ${{ github.event.inputs.mode }} (Manual Trigger)"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "‚è∞ Mode: Scheduled Run"
            echo "üìã Schedule: ${{ github.schedule }}"
            case "${{ github.schedule }}" in
              "30 14 * * 1-5") echo "üìä Scheduled Mode: Daily Scan (2:30 PM IST)" ;;
              "0 18 * * 1-5") echo "üìä Scheduled Mode: Stop-Loss Update (6:00 PM IST)" ;;
              "30 14 * * 0") echo "üìä Scheduled Mode: Weekly Summary (Sunday 2:30 PM IST)" ;;
              "0 15 1 * *") echo "üìä Scheduled Mode: Monthly Review (1st of month 3:00 PM IST)" ;;
              *) echo "üìä Scheduled Mode: Unknown" ;;
            esac
          else
            echo "üéØ Mode: Default (scan)"
          fi
          echo "üöÄ =========================================="
      
      - name: Debug environment variables
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          IPO_YEARS_BACK: ${{ secrets.IPO_YEARS_BACK }}
        run: |
          echo "=== Environment Variables Debug ==="
          echo "TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:0:10}..." # Show first 10 chars
          echo "TELEGRAM_CHAT_ID: $TELEGRAM_CHAT_ID"
          echo "IPO_YEARS_BACK: $IPO_YEARS_BACK"
          echo "=================================="
          
          # Test if CHAT_ID is properly set
          if [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ùå ERROR: TELEGRAM_CHAT_ID is empty!"
            exit 1
          else
            echo "‚úÖ TELEGRAM_CHAT_ID is set: $TELEGRAM_CHAT_ID"
          fi
          
          # Test if BOT_TOKEN is properly set
          if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
            echo "‚ùå ERROR: TELEGRAM_BOT_TOKEN is empty!"
            exit 1
          else
            echo "‚úÖ TELEGRAM_BOT_TOKEN is set (length: ${#TELEGRAM_BOT_TOKEN})"
          fi
      
      - name: Test Telegram connectivity
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Testing Telegram connectivity..."
          python test_env_vars.py
      
      - name: Run scanner
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          IPO_YEARS_BACK: ${{ secrets.IPO_YEARS_BACK }}
        run: |
          # Always use the provided mode for manual triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MODE="${{ github.event.inputs.mode }}"
            if [ -z "$MODE" ]; then
              MODE="scan"
            fi
            echo "Running manual trigger in mode: $MODE"
            python streamlined-ipo-scanner.py $MODE
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "Running scheduled workflow"
            case "${{ github.schedule }}" in
              "30 14 * * 1-5") python streamlined-ipo-scanner.py scan ;;
              "0 18 * * 1-5") python streamlined-ipo-scanner.py stop_loss_update ;;
              "30 14 * * 0") python streamlined-ipo-scanner.py weekly_summary ;;
              "0 15 1 * *") python streamlined-ipo-scanner.py monthly_review ;;
              *) python streamlined-ipo-scanner.py scan ;;
            esac
          else
            echo "Running default mode: scan"
            python streamlined-ipo-scanner.py scan
          fi
      
      - name: Upload CSV files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ipo-data-${{ github.run_number }}
          path: |
            ipo_signals.csv
            ipo_positions.csv
            recent_ipo_symbols.csv
          retention-days: 30
          if-no-files-found: warn
      
      - name: Commit and push CSV files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check which files exist before adding them
          files_to_add=""
          if [ -f "ipo_signals.csv" ]; then
            files_to_add="$files_to_add ipo_signals.csv"
          fi
          if [ -f "ipo_positions.csv" ]; then
            files_to_add="$files_to_add ipo_positions.csv"
          fi
          if [ -f "recent_ipo_symbols.csv" ]; then
            files_to_add="$files_to_add recent_ipo_symbols.csv"
          fi
          
          if [ -n "$files_to_add" ]; then
            # Force add files even if they're in .gitignore
            git add -f $files_to_add
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "Update IPO data - ${{ github.run_number }} [skip ci]"
              git push
            fi
          else
            echo "No CSV files found to commit"
          fi
